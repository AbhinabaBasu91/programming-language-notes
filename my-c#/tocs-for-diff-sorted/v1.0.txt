! expressions
&& expressions
<c>
<code>
<example>
<exception>
<include>
<list>
<para>
<param>
<paramref>
<permission>
<remarks>
<returns>
<see>
<seealso>
<summary>
<value>
?: expressions
Abstract classes
Abstract classes and interfaces
Abstract methods
Access modifiers
Access to private and protected members of the containing type
Accessibility constraints
Accessibility domains
Accessors
Addition operator
An example
Applicable function member
Application Startup
Application termination
Argument lists
Arithmetic operators
Array access
Array covariance
Array creation
Array creation expressions
Array element access
Array elements
Array initializers
Array members
Array types
Arrays
Assignment
Assignment operators
Atomicity of variable references
Attribute classes
Attribute instances
Attribute parameter types
Attribute specification
Attribute usage
Attributes
Attributes for Interoperation
Automatic memory management
Base access
Base classes
Base interfaces
Base types
Basic concepts
Better conversion
Better function member
Binary numeric promotions
Binary operator overload resolution
Binary operators
Bitwise complement operator
Block statements, checked, and unchecked statements
Blocks
Boolean conditional logical operators
Boolean equality operators
Boolean expressions
Boolean literals
Boolean logical operators
Boxing and unboxing
Boxing conversions
Break, continue, and goto statements
C# source code
Candidate user-defined operators
Cast expressions
Causes of exceptions
Character literals
Class and struct differences
Class base specification
Class body
Class declarations
Class members
Class modifiers
Class types
Classes
Comments
Common Exception Classes
Compilation of an attribute
Compilation units
Compound assignment
Conditional compilation directives
Conditional compilation symbols
Conditional logical operators
Conditional operator
Constant expressions
Constants
Constituent types
Constructor execution
Constructor initializers
Constructors
Conversion operators
Conversions
Database boolean type
Database integer type
Decimal comparison operators
Declaration directives
Declaration statements
Declarations
Declared accessibility
Default constructors
Default values
Definite assignment
Delegate creation expressions
Delegate declarations
Delegate equality operators
Delegate instantiation
Delegate invocation
Delegate invocations
Delegate members
Delegate types
Delegates
Destructors
Diagnostic directives
Division operator
Do statements
Documentation comments
Dynamic memory allocation
Element access
End points and reachability
Enum declarations
Enum members
Enum modifiers
Enum values and operations
Enumeration comparison operators
Enumeration logical operators
Enumeration members
Enumeration types
Enums
Evaluation of user-defined conversions
Event accessors
Event assignment
Events
Exceptions
Execution order
Explicit conversions
Explicit enumeration conversions
Explicit interface member implementations
Explicit numeric conversions
Explicit reference conversions
Expression
Expression classifications
Expression statements
Expressions
External methods
Field initialization
Field initializers
Field-like events
Fields
Fixed and moveable variables
Floating point types
Floating-point comparison operators
For statements
Foreach statements
Fully qualified interface member names
Fully qualified name
Fully qualified names
Function member invocation
Function members
General rules for expressions with embedded expressions
General rules for simple expressions
General rules for statements
Getting started
Grammar
Grammar extensions for unsafe code
Grammar notation
Grammars
Hiding
Hiding through inheritance
Hiding through nesting
How exceptions are handled
ID string examples
ID string format
Identical simple names and type names
Identifiers
Identity conversion
If statements
Implicit constant expression conversions
Implicit conversions
Implicit enumeration conversions
Implicit numeric conversions
Implicit reference conversions
Indexer access
Indexer overloading
Indexers
Inheritance
Initially assigned variables
Initially unassigned variables
Instance constructors
Instance field initialization
Instance variable initializers
Instance variables
Instance variables in classes
Instance variables in structs
Integer comparison operators
Integer literals
Integer logical operators
Integral types
Interface body
Interface declarations
Interface events
Interface implementation inheritance
Interface implementations
Interface indexers
Interface mapping
Interface member access
Interface members
Interface methods
Interface modifiers
Interface properties
Interface re-implementation
Interface types
Interfaces
Interoperation with COM and Win32 components
Interoperation with other .NET languages
Introduction
Invariant meaning in blocks
Invocation expressions
Invocation expressions and object creation expressions
Invocations on boxed instances
Iteration statements
Jump statements
Keywords
Labeled statements
Lexical analysis
Lexical grammar
Lexical structure
Line directives
Line terminators
Literals
Local constant declarations
Local variable declarations
Local variables
Lock statements
Logical negation operator
Logical operators
Meaning of this
Member access
Member lookup
Member names reserved for destructors
Member names reserved for events
Member names reserved for indexers
Member names reserved for properties
Members
Method body
Method invocations
Method overloading
Method parameters
Methods
Multiplication operator
Name hiding
Namespace and type names
Namespace declarations
Namespace members
Namespaces
Namespaces and assemblies
Nested types
Numeric promotions
Object creation expressions
Operator overloading
Operator precedence and associativity
Operators
Operators and punctuators
Optional instance constructor parameters
Output parameters
Overload resolution
Override methods
Parameter arrays
Parenthesized expressions
Permitted user-defined conversions
Pointer arithmetic
Pointer comparison
Pointer conversions
Pointer element access
Pointer increment and decrement
Pointer indirection
Pointer member access
Pointer types
Pointers in expressions
Positional and named parameters
Postfix increment and decrement operators
Pre-processing directives
Pre-processing expressions
Precise rules for determining definite assignment
Predefined types
Prefix increment and decrement operators
Primary expressions
Private constructors
Processing the documentation file
Programs
Properties
Protected access for instance members
Readonly fields
Real literals
Recommended tags
Reference parameters
Reference type equality operators
Reference types
References
Region directives
Relational and type-testing operators
Remainder operator
Reserved attributes
Reserved member names
Resulting XML
Return statements
Run-time retrieval of an attribute instance
Scopes
Sealed classes
Sealed methods
Selection statements
Shift operators
Signatures and overloading
Simple assignment
Simple assignment expressions
Simple names
Simple types
Stack allocation
Standard conversions
Standard explicit conversions
Standard implicit conversions
Statement lists
Statements
Static and instance events
Static and instance fields
Static and instance members
Static and instance methods
Static and instance properties
Static constructors
Static field initialization
Static variables
String equality operators
String literals
Struct body
Struct declarations
Struct examples
Struct interfaces
Struct members
Struct modifiers
Struct types
Structs
Subtraction operator
Switch statements
Syntactic grammar
Table of Contents
The AttributeUsage attribute
The Conditional attribute
The IndexerName attribute
The Obsolete attribute
The System.Array type
The System.Enum type
The System.Exception class
The System.ValueType type
The address-of operator
The as operator
The bool type
The break statement
The checked and unchecked operators
The checked and unchecked statements
The continue statement
The decimal type
The do statement
The empty statement
The fixed statement
The for statement
The foreach statement
The goto statement
The if statement
The is operator
The lock statement
The new modifier
The new operator
The null literal
The object type
The return statement
The sizeof operator
The string type
The switch statement
The throw statement
The try statement
The typeof operator
The using statement
The while statement
This access
Throw statements
Tokens
Try-catch statements
Try-catch-finally statements
Try-finally statements
Type declarations
Type system unification
Types
Unary minus operator
Unary numeric promotions
Unary operator overload resolution
Unary operators
Unary plus operator
Unboxing conversions
Unicode character escape sequences
Unsafe code
Unsafe contexts
User-defined conditional logical operators
User-defined conversions
User-defined explicit conversions
User-defined implicit conversions
Using alias directives
Using directives
Using namespace directives
Using statements
Using static readonly fields for constants
Value parameters
Value semantics
Value types
Values of expressions
Variable categories
Variable initializers
Variable references
Variables
Variables and parameters
Versioning
Versioning of constants and static readonly fields
Virtual methods
Virtual, sealed, override, and abstract accessors
Volatile fields
While statements
White space
this access
|| expressions